# name: Django CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Run tests
#         run: |
#           python manage.py test

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Start Minikube
#         run: |
#           curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube
#           sudo mv minikube /usr/local/bin/
#           minikube start --driver=docker

#       - name: Build Docker Image in Minikube
#         run: |
#           eval $(minikube docker-env)
#           docker build -t django-ecommerce:latest .
#           kubectl apply -f deployment.yaml
#           kubectl apply -f service.yaml

#       - name: Verify Deployment
#         run: |
#           kubectl get pods
#           kubectl get services

# name: Django CI/CD Pipeline

# on: 
#   push:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: |
#           pip install -r requirements.txt

#   test:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: |
#           pip install -r requirements.txt

#       - name: Run Tests
#         run: |
#           python manage.py test

#   deploy:
#     runs-on: ubuntu-latest
#     needs: test  # Ensures deployment happens only if tests pass
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Start Minikube
#         run: minikube start

#       - name: Build Docker Image in Minikube
#         run: |
#           eval $(minikube docker-env)
#           docker build -t django-app .

#       - name: Deploy to Minikube
#         run: |
#           kubectl apply -f deployment.yaml
#           kubectl apply -f service.yaml










# name: Django CI/CD Pipeline

# on: 
#   push:
#     branches:
#       - main  # Runs only when changes are pushed to the main branch

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#   test:
#     runs-on: ubuntu-latest
#     needs: build  # Runs only after the build job succeeds
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       - name: Run Tests
#         run: python manage.py test

#   # deploy:
#   #   runs-on: ubuntu-latest
#   #   needs: test  # Ensures deployment happens only if tests pass
#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v3

#   #     - name: Set up Minikube
#   #       uses: medyagh/setup-minikube@latest
#   #       with:
#   #         driver: docker  # Uses Docker as the Minikube driver

#   #     - name: Start Minikube
#   #       run: minikube start --wait=true

#   #     - name: Set up Docker inside Minikube
#   #       run: eval $(minikube -p minikube docker-env)

#   #     - name: Build and Tag Docker Image inside Minikube
#   #       run: docker build -t django-app:latest .

#   #     - name: Apply Kubernetes Manifests
#   #       run: |
#   #         kubectl apply -f deployment.yaml
#   #         kubectl apply -f service.yaml

#   #     - name: Restart Deployment to Apply Changes
#   #       run: kubectl rollout restart deployment django-app

#   #     - name: Verify Running Pods
#   #       run: kubectl get pods -o wide
#   deploy:
#   runs-on: ubuntu-latest
#   needs: test
#   steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: Set up Minikube
#       uses: medyagh/setup-minikube@latest
#       with:
#         driver: docker

#     - name: Start Minikube
#       run: minikube start --wait=true

#     - name: Use Minikube Docker Daemon
#       run: eval $(minikube docker-env)

#     - name: Build and Tag New Docker Image Inside Minikube
#       run: |
#         docker build -t django-app:latest .

#     - name: Restart Deployment to Use Latest Image
#       run: |
#         kubectl apply -f deployment.yaml
#         kubectl apply -f service.yaml
#         kubectl rollout restart deployment django-app  # ✅ Force update

#     - name: Verify Running Pods
#       run: kubectl get pods -o wide







# name: Django CI/CD Pipeline

# on: 
#   push:
#     branches:
#       - main  # Runs only when changes are pushed to the main branch

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#   test:
#     runs-on: ubuntu-latest
#     needs: build  # Runs only after the build job succeeds
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       - name: Run Tests
#         run: python manage.py test

#   deploy:
#     runs-on: ubuntu-latest
#     needs: test  # Ensures deployment happens only if tests pass
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Minikube
#         uses: medyagh/setup-minikube@latest
#         with:
#           driver: docker  # Uses Docker as the Minikube driver

#       - name: Start Minikube
#         run: minikube start --wait=true

#       - name: Use Minikube Docker Daemon
#         run: eval $(minikube docker-env)

#       - name: Build and Tag New Docker Image Inside Minikube
#         run: docker build -t django-app:latest .

#       - name: Restart Deployment to Use Latest Image
#         run: |
#           kubectl apply -f deployment.yaml
#           kubectl apply -f service.yaml
#           kubectl rollout restart deployment django-app  # ✅ Restart deployment

#       - name: Verify Running Pods
#         run: kubectl get pods -o wide



# name: CI/CD Pipeline for Django App

# on:
#   push:
#     branches:
#       - main  # Runs when pushing to main branch

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t aashish9311/django-app:latest .
#           docker push aashish9311/django-app:latest

#   deploy:
#     needs: build-and-push
#     runs-on: ubuntu-latest

#     steps:
#       - name: Configure kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: v1.26.0  # Change this to match your Kubernetes version

#       - name: Set Kubernetes Context
#         run: |
#           echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig.yaml
#           export KUBECONFIG=kubeconfig.yaml

#       - name: Restart Deployment
#         run: |
#           kubectl rollout restart deployment django-app



# name: CI/CD Pipeline for Django on Minikube

# on:
#   push:
#     branches:
#       - main  # Change branch name if needed

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/django-app:latest .
#           docker push ${{ secrets.DOCKER_USERNAME }}/django-app:latest

#   deploy:
#     needs: build-and-push
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up kubectl
#         run: |
#           curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
#           chmod +x kubectl
#           sudo mv kubectl /usr/local/bin/

#       - name: Set Up Minikube
#         run: |
#           curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube-linux-amd64
#           sudo mv minikube-linux-amd64 /usr/local/bin/minikube
#           minikube start --driver=docker

#       - name: Configure kubectl to use Minikube
#         run: |
#           minikube kubectl -- get po -A

#       - name: Apply Kubernetes Manifests
#         run: |
#           kubectl delete deployment django-app || true
#           kubectl apply -f deployment.yaml
#           kubectl rollout restart deployment django-app

#       - name: Wait for deployment to be ready
#         run: kubectl rollout status deployment/django-app






# name: CI/CD Pipeline for Django on Minikube

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t aashish9311/django-app:latest .
#           docker push aashish9311/django-app:latest

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'latest'

#       - name: Set Up Minikube
#         run: |
#           curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube
#           sudo mv minikube /usr/local/bin/
#           minikube start --driver=docker --memory=4096 --cpus=2
#           minikube status

#       - name: Configure kubectl to use Minikube
#         run: |
#           minikube kubectl -- config view --raw > $HOME/.kube/config
#           kubectl cluster-info
#           kubectl get nodes

#       - name: Apply Kubernetes Manifests
#         run: |
#           kubectl apply -f k8s/deployment.yaml
#           kubectl apply -f k8s/service.yaml
#           kubectl get all

#       - name: Debug Kubernetes Pods
#         run: |
#           kubectl get pods -o wide
#           kubectl get events --sort-by=.metadata.creationTimestamp

#       - name: Wait for deployment to be ready
#         run: |
#           kubectl rollout status deployment/django-app --timeout=120s || kubectl get pods

#       - name: Debug Pod Logs (if deployment fails)
#         if: failure()
#         run: |
#           POD_NAME=$(kubectl get pods -l app=django-app -o jsonpath="{.items[0].metadata.name}")
#           kubectl describe pod $POD_NAME
#           kubectl logs $POD_NAME

#       - name: Restart Deployment (if needed)
#         if: failure()
#         run: |
#           kubectl rollout restart deployment/django-app
#           kubectl rollout status deployment/django-app --timeout=120s










# name: CI/CD Pipeline for Django on Minikube

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           IMAGE_TAG=${{ github.sha }}
#           docker build -t aashish9311/django-app:$IMAGE_TAG .
#           docker push aashish9311/django-app:$IMAGE_TAG
#           echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'latest'

#       - name: Set Up Minikube
#         run: |
#           curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube
#           sudo mv minikube /usr/local/bin/
#           minikube start --driver=docker
#           minikube status

#       - name: Configure kubectl to use Minikube
#         run: |
#           minikube kubectl -- config view --raw > $HOME/.kube/config
#           kubectl cluster-info
#           kubectl get nodes

#       - name: Update Deployment File with New Image Tag
#         run: |
#           sed -i "s|REPLACE_IMAGE_TAG|${{ env.IMAGE_TAG }}|g" k8s/deployment.yaml

#       - name: Apply Kubernetes Manifests
#         run: |
#           kubectl apply -f k8s/deployment.yaml
#           kubectl apply -f k8s/service.yaml
#           kubectl get all

#       - name: Debug Kubernetes Pods
#         run: |
#           kubectl get pods -o wide
#           kubectl get events --sort-by=.metadata.creationTimestamp

#       - name: Wait for Deployment to be Ready
#         run: |
#           kubectl rollout status deployment/django-app --timeout=60s || kubectl get pods

#       - name: Debug Pod Logs (if deployment fails)
#         if: failure()
#         run: |
#           POD_NAME=$(kubectl get pods -l app=django-app -o jsonpath="{.items[0].metadata.name}")
#           kubectl describe pod $POD_NAME
#           kubectl logs $POD_NAME

#       - name: Check Deployment Health and Restart if Needed
#         run: |
#           UNAVAILABLE=$(kubectl get deployment django-app -o jsonpath='{.status.unavailableReplicas}')
#           if [[ "$UNAVAILABLE" -gt 0 ]]; then
#             echo "Restarting deployment..."
#             kubectl rollout restart deployment/django-app
#             kubectl rollout status deployment/django-app --timeout=60s
#           else
#             echo "Deployment is healthy."
#           fi







# name: CI/CD Pipeline for Django on Minikube

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           IMAGE_TAG=${{ github.sha }}
#           docker build -t aashish9311/django-app:$IMAGE_TAG .
#           docker push aashish9311/django-app:$IMAGE_TAG
#           echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'latest'

#       - name: Set Up Minikube
#         run: |
#           curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube
#           sudo mv minikube /usr/local/bin/
#           minikube start --driver=docker
#           minikube status

#       - name: Configure kubectl to use Minikube
#         run: |
#           minikube kubectl -- config view --raw > $HOME/.kube/config
#           kubectl cluster-info
#           kubectl get nodes

#       - name: Update Deployment File with New Image Tag
#         run: |
#           sed -i "s|\${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g" k8s/deployment.yaml

#       - name: Apply Kubernetes Manifests
#         run: |
#           kubectl apply -f k8s/deployment.yaml
#           kubectl apply -f k8s/service.yaml
#           kubectl get all

#       - name: Debug Kubernetes Pods
#         run: |
#           kubectl get pods -o wide
#           kubectl get events --sort-by=.metadata.creationTimestamp

#       - name: Wait for Deployment to be Ready
#         run: |
#           kubectl rollout status deployment/django-app --timeout=60s || kubectl get pods

#       - name: Debug Pod Logs (if deployment fails)
#         if: failure()
#         run: |
#           POD_NAME=$(kubectl get pods -l app=django-app -o jsonpath="{.items[0].metadata.name}")
#           kubectl describe pod $POD_NAME
#           kubectl logs $POD_NAME

#       - name: Check Deployment Health and Restart if Needed
#         run: |
#           UNAVAILABLE=$(kubectl get deployment django-app -o jsonpath='{.status.unavailableReplicas}')
#           if [[ "$UNAVAILABLE" -gt 0 ]]; then
#             echo "Restarting deployment..."
#             kubectl rollout restart deployment/django-app
#             kubectl rollout status deployment/django-app --timeout=60s
#           else
#             echo "Deployment is healthy."
#           fi



























# name: CI/CD Pipeline for Django on Minikube

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t aashish9311/django-app:latest .
#           docker push aashish9311/django-app:latest

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'latest'

#       - name: Set Up Minikube
#         run: |
#           curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube
#           sudo mv minikube /usr/local/bin/
#           minikube start --driver=docker --memory=4096 --cpus=2
#           minikube status

#       - name: Configure kubectl to use Minikube
#         run: |
#           minikube kubectl -- config view --raw > $HOME/.kube/config
#           kubectl cluster-info
#           kubectl get nodes

#       - name: Apply Kubernetes Manifests
#         run: |
#           kubectl apply -f k8s/deployment.yaml
#           kubectl apply -f k8s/service.yaml
#           kubectl get all

#       - name: Debug Kubernetes Pods
#         run: |
#           kubectl get pods -o wide
#           kubectl get events --sort-by=.metadata.creationTimestamp

#       - name: Wait for deployment to be ready
#         run: |
#           kubectl rollout status deployment/django-app --timeout=120s || kubectl get pods

#       - name: Debug Pod Logs (if deployment fails)
#         if: failure()
#         run: |
#           POD_NAME=$(kubectl get pods -l app=django-app -o jsonpath="{.items[0].metadata.name}")
#           kubectl describe pod $POD_NAME
#           kubectl logs $POD_NAME

#       - name: Restart Deployment (if needed)
#         if: failure()
#         run: |
#           kubectl rollout restart deployment/django-app
#           kubectl rollout status deployment/django-app --timeout=120s








# name: CI/CD Pipeline for Django on Minikube

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t aashish9311/django-app:latest .
#           docker push aashish9311/django-app:latest

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'latest'

#       - name: Set Up Minikube
#         run: |
#           curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube
#           sudo mv minikube /usr/local/bin/
#           minikube start --driver=docker --memory=4096 --cpus=2
#           minikube status

#       - name: Configure kubectl to use Minikube
#         run: |
#           minikube kubectl -- config view --raw > $HOME/.kube/config
#           kubectl cluster-info
#           kubectl get nodes

#       - name: Apply Kubernetes Manifests
#         run: |
#           kubectl apply -f k8s/deployment.yaml
#           kubectl apply -f k8s/service.yaml
#           kubectl get all

#       - name: Ensure Rolling Update of Deployment
#         run: |
#           kubectl rollout restart deployment/django-app
#           kubectl rollout status deployment/django-app --timeout=120s





# name: CI/CD Pipeline for Django on Minikube

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t aashish9311/django-app:latest .
#           docker push aashish9311/django-app:latest

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'latest'

#       - name: Start Minikube
#         run: |
#           curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube
#           sudo mv minikube /usr/local/bin/
#           sudo minikube start --driver=docker --memory=4096 --cpus=2
#           minikube status

#       - name: Set up Minikube for kubectl
#         run: |
#           mkdir -p $HOME/.kube
#           minikube kubectl -- config view --raw > $HOME/.kube/config
#           kubectl cluster-info
#           kubectl get nodes

#       - name: Apply Kubernetes Manifests
#         run: |
#           kubectl apply -f k8s/deployment.yaml
#           kubectl apply -f k8s/service.yaml
#           kubectl get all

#       - name: Debug Kubernetes Pods
#         run: |
#           kubectl get pods -o wide
#           kubectl get events --sort-by=.metadata.creationTimestamp

#       - name: Wait for deployment to be ready
#         run: |
#           kubectl rollout status deployment/django-app --timeout=120s || kubectl get pods

#       - name: Debug Pod Logs (if deployment fails)
#         if: failure()
#         run: |
#           POD_NAME=$(kubectl get pods -l app=django -o jsonpath="{.items[0].metadata.name}")
#           kubectl describe pod $POD_NAME
#           kubectl logs $POD_NAME

#       - name: Restart Deployment (if needed)
#         if: failure()
#         run: |
#           kubectl rollout restart deployment/django-app
#           kubectl rollout status deployment/django-app --timeout=120s









name: CI/CD Pipeline for Django on Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t aashish9311/django-app:latest .
          docker push aashish9311/django-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Kind (Kubernetes in Docker)
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/

      - name: Create Kubernetes Cluster with Kind
        run: |
          kind create cluster --name django-cluster
          kubectl cluster-info

      - name: Load Docker Image into Kind Cluster
        run: |
          kind load docker-image aashish9311/django-app:latest --name django-cluster
          kubectl get nodes

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl get all

      - name: Wait for Deployment to be Ready
        run: |
          kubectl rollout status deployment/django-app --timeout=120s

      - name: Debug Pod Logs on Failure
        if: failure()
        run: |
          POD_NAME=$(kubectl get pods -l app=django -o jsonpath="{.items[0].metadata.name}")
          kubectl describe pod $POD_NAME
          kubectl logs $POD_NAME
