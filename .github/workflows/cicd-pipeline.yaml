# name: Django CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Run tests
#         run: |
#           python manage.py test

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Start Minikube
#         run: |
#           curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           chmod +x minikube
#           sudo mv minikube /usr/local/bin/
#           minikube start --driver=docker

#       - name: Build Docker Image in Minikube
#         run: |
#           eval $(minikube docker-env)
#           docker build -t django-ecommerce:latest .
#           kubectl apply -f deployment.yaml
#           kubectl apply -f service.yaml

#       - name: Verify Deployment
#         run: |
#           kubectl get pods
#           kubectl get services

# name: Django CI/CD Pipeline

# on: 
#   push:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: |
#           pip install -r requirements.txt

#   test:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: |
#           pip install -r requirements.txt

#       - name: Run Tests
#         run: |
#           python manage.py test

#   deploy:
#     runs-on: ubuntu-latest
#     needs: test  # Ensures deployment happens only if tests pass
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Start Minikube
#         run: minikube start

#       - name: Build Docker Image in Minikube
#         run: |
#           eval $(minikube docker-env)
#           docker build -t django-app .

#       - name: Deploy to Minikube
#         run: |
#           kubectl apply -f deployment.yaml
#           kubectl apply -f service.yaml










# name: Django CI/CD Pipeline

# on: 
#   push:
#     branches:
#       - main  # Runs only when changes are pushed to the main branch

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#   test:
#     runs-on: ubuntu-latest
#     needs: build  # Runs only after the build job succeeds
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       - name: Run Tests
#         run: python manage.py test

#   # deploy:
#   #   runs-on: ubuntu-latest
#   #   needs: test  # Ensures deployment happens only if tests pass
#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v3

#   #     - name: Set up Minikube
#   #       uses: medyagh/setup-minikube@latest
#   #       with:
#   #         driver: docker  # Uses Docker as the Minikube driver

#   #     - name: Start Minikube
#   #       run: minikube start --wait=true

#   #     - name: Set up Docker inside Minikube
#   #       run: eval $(minikube -p minikube docker-env)

#   #     - name: Build and Tag Docker Image inside Minikube
#   #       run: docker build -t django-app:latest .

#   #     - name: Apply Kubernetes Manifests
#   #       run: |
#   #         kubectl apply -f deployment.yaml
#   #         kubectl apply -f service.yaml

#   #     - name: Restart Deployment to Apply Changes
#   #       run: kubectl rollout restart deployment django-app

#   #     - name: Verify Running Pods
#   #       run: kubectl get pods -o wide
#   deploy:
#   runs-on: ubuntu-latest
#   needs: test
#   steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: Set up Minikube
#       uses: medyagh/setup-minikube@latest
#       with:
#         driver: docker

#     - name: Start Minikube
#       run: minikube start --wait=true

#     - name: Use Minikube Docker Daemon
#       run: eval $(minikube docker-env)

#     - name: Build and Tag New Docker Image Inside Minikube
#       run: |
#         docker build -t django-app:latest .

#     - name: Restart Deployment to Use Latest Image
#       run: |
#         kubectl apply -f deployment.yaml
#         kubectl apply -f service.yaml
#         kubectl rollout restart deployment django-app  # ✅ Force update

#     - name: Verify Running Pods
#       run: kubectl get pods -o wide







# name: Django CI/CD Pipeline

# on: 
#   push:
#     branches:
#       - main  # Runs only when changes are pushed to the main branch

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#   test:
#     runs-on: ubuntu-latest
#     needs: build  # Runs only after the build job succeeds
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       - name: Run Tests
#         run: python manage.py test

#   deploy:
#     runs-on: ubuntu-latest
#     needs: test  # Ensures deployment happens only if tests pass
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Minikube
#         uses: medyagh/setup-minikube@latest
#         with:
#           driver: docker  # Uses Docker as the Minikube driver

#       - name: Start Minikube
#         run: minikube start --wait=true

#       - name: Use Minikube Docker Daemon
#         run: eval $(minikube docker-env)

#       - name: Build and Tag New Docker Image Inside Minikube
#         run: docker build -t django-app:latest .

#       - name: Restart Deployment to Use Latest Image
#         run: |
#           kubectl apply -f deployment.yaml
#           kubectl apply -f service.yaml
#           kubectl rollout restart deployment django-app  # ✅ Restart deployment

#       - name: Verify Running Pods
#         run: kubectl get pods -o wide



name: CI/CD Pipeline for Django App

on:
  push:
    branches:
      - main  # Runs when pushing to main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t aashish9311/django-app:latest .
          docker push aashish9311/django-app:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.26.0  # Change this to match your Kubernetes version

      - name: Set Kubernetes Context
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Restart Deployment
        run: |
          kubectl rollout restart deployment django-app
